{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","render","Streamlit","setFrameHeight","window","innerHeight","props","args","isUser","avatarStyle","seed","message","logo","avatarUrl","theme","Avatar","styled","img","border","borderRadius","height","width","margin","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","whiteSpace","fontFamily","font","css","src","alt","draggable","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"6RAWMA,E,4MACKC,OAAS,WACZC,IAAUC,eAAeC,OAAOC,aAChC,MAAmD,EAAKC,MAAMC,KAAvDC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,YAAaC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,QAASC,EAA3C,EAA2CA,KACrCC,EAAcD,GAAF,uCAAgDH,EAAhD,qBAAwEC,GAKnFI,EAAS,EAAKR,MAAdQ,MAIP,IAAKA,EACD,OAAO,oFAIX,IAAMC,EAASC,IAAOC,IAAI,CACtBC,OAAO,wBACPC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAINC,EAAUP,IAAOQ,IAAI,CACvBC,QAAS,eACTC,WAAYZ,EAAMa,yBAClBT,OAAQ,wBACRC,aAAc,OACdS,QAAS,YACTN,OAAQ,WACRO,SAAU,MACVC,WAAY,aAIV9B,EAAOgB,IAAOQ,IAAI,CAChBC,QAAS,OAETM,WAAW,GAAD,OAAKjB,EAAMkB,KAAX,sCACVZ,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAEX,SAACf,GACG,OAAIA,EAAME,OACCyB,YAAP,4MAQGA,YAAP,6BAGR,OAAIzB,EAEI,kBAAC,EAAD,CAAMA,OAAQA,GACV,kBAACe,EAAD,KAAUZ,IAKd,kBAAC,EAAD,CAAMH,OAAQA,GACV,kBAACO,EAAD,CAAQmB,IAAKrB,EAAWsB,IAAI,UAAUC,UAAU,UAChD,kBAACb,EAAD,KAAUZ,K,yBAtEX0B,KA8EJC,cAAwBtC,GCrFvCuC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4406fc46.chunk.js","sourcesContent":["import {\r\n    // eslint-disable-next-line\r\n    Streamlit,\r\n    StreamlitComponentBase,\r\n    withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, {ReactNode} from \"react\"\r\nimport styled from '@emotion/styled'\r\nimport {css} from '@emotion/react'\r\n\r\n\r\nclass Chat extends StreamlitComponentBase {\r\n    public render = (): ReactNode => {\r\n        Streamlit.setFrameHeight(window.innerHeight)\r\n        const {isUser, avatarStyle, seed, message, logo} = this.props.args;\r\n        const avatarUrl = !!logo ? logo : `https://api.dicebear.com/5.x/${avatarStyle}/svg?seed=${seed}`\r\n\r\n        // Streamlit sends us a theme object via props that we can use to ensure\r\n        // that our component has visuals that match the active theme in a\r\n        // streamlit app.\r\n        const {theme} = this.props\r\n\r\n        // Maintain compatibility with older versions of Streamlit that don't send\r\n        // a theme object.\r\n        if (!theme) {\r\n            return <div>Theme is undefined, please check streamlit version.</div>\r\n        }\r\n\r\n        // styles for the avatar image\r\n        const Avatar = styled.img({\r\n            border: `1px solid transparent`,\r\n            borderRadius: '50%',\r\n            height: '4rem',\r\n            width: '4rem',\r\n            margin: 0\r\n        })\r\n\r\n        // styles for the message box\r\n        const Message = styled.div({\r\n            display: 'inline-block',\r\n            background: theme.secondaryBackgroundColor,\r\n            border: '1px solid transparent',\r\n            borderRadius: '10px',\r\n            padding: '10px 14px',\r\n            margin: '5px 20px',\r\n            maxWidth: '70%',\r\n            whiteSpace: 'pre-line'\r\n        })\r\n\r\n        // styles for the container\r\n        const Chat = styled.div({\r\n                display: 'flex',\r\n                // flexDirection: 'row',\r\n                fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`,\r\n                height: 'auto',\r\n                margin: 0,\r\n                width: '100%'\r\n            },\r\n            (props: { isUser: boolean }) => {  // specific styles\r\n                if (props.isUser) {\r\n                    return css`\r\n                      flex-direction: row-reverse;\r\n\r\n                      & > div {\r\n                        text-align: right;\r\n                      }\r\n                    `\r\n                }\r\n                return css``\r\n            })\r\n        // show no Icon if isUser\r\n        if (isUser) {\r\n            return (\r\n                <Chat isUser={isUser}>\r\n                    <Message>{message}</Message>\r\n                </Chat>\r\n            )\r\n        } else {\r\n            return (\r\n                <Chat isUser={isUser}>\r\n                    <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\r\n                    <Message>{message}</Message>\r\n                </Chat>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default withStreamlitConnection(Chat);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Chat from \"./stChat\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Chat />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}